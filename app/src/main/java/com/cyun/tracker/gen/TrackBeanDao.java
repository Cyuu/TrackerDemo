package com.cyun.tracker.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cyun.tracker.bean.TrackBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRACK_BEAN".
*/
public class TrackBeanDao extends AbstractDao<TrackBean, Long> {

    public static final String TABLENAME = "TRACK_BEAN";

    /**
     * Properties of entity TrackBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Trackid = new Property(1, String.class, "trackid", false, "TRACKID");
        public final static Property User = new Property(2, String.class, "user", false, "USER");
        public final static Property Pwd = new Property(3, String.class, "pwd", false, "PWD");
        public final static Property Date = new Property(4, String.class, "date", false, "DATE");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property TimeStamp = new Property(6, long.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property Pic = new Property(8, String.class, "pic", false, "PIC");
        public final static Property Longitude = new Property(9, String.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(10, String.class, "Latitude", false, "LATITUDE");
        public final static Property Addr = new Property(11, String.class, "addr", false, "ADDR");
    }


    public TrackBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TrackBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRACK_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TRACKID\" TEXT UNIQUE ," + // 1: trackid
                "\"USER\" TEXT," + // 2: user
                "\"PWD\" TEXT," + // 3: pwd
                "\"DATE\" TEXT," + // 4: date
                "\"TIME\" TEXT," + // 5: time
                "\"TIME_STAMP\" INTEGER NOT NULL ," + // 6: timeStamp
                "\"CONTENT\" TEXT," + // 7: content
                "\"PIC\" TEXT," + // 8: pic
                "\"LONGITUDE\" TEXT," + // 9: Longitude
                "\"LATITUDE\" TEXT," + // 10: Latitude
                "\"ADDR\" TEXT);"); // 11: addr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRACK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TrackBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trackid = entity.getTrackid();
        if (trackid != null) {
            stmt.bindString(2, trackid);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(3, user);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(4, pwd);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
        stmt.bindLong(7, entity.getTimeStamp());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(9, pic);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(10, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(11, Latitude);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(12, addr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TrackBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String trackid = entity.getTrackid();
        if (trackid != null) {
            stmt.bindString(2, trackid);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(3, user);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(4, pwd);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(5, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
        stmt.bindLong(7, entity.getTimeStamp());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(9, pic);
        }
 
        String Longitude = entity.getLongitude();
        if (Longitude != null) {
            stmt.bindString(10, Longitude);
        }
 
        String Latitude = entity.getLatitude();
        if (Latitude != null) {
            stmt.bindString(11, Latitude);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(12, addr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TrackBean readEntity(Cursor cursor, int offset) {
        TrackBean entity = new TrackBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // trackid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pwd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.getLong(offset + 6), // timeStamp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pic
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Longitude
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Latitude
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // addr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TrackBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTrackid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeStamp(cursor.getLong(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPic(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLongitude(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLatitude(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TrackBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TrackBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TrackBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
